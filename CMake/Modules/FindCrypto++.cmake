# - find Crypto++
# CRYPTO++_INCLUDE_DIR - Where to find Crypto++ header files (directory)
# CRYPTO++_LIBRARIES - Crypto++ libraries
# CRYPTO++_LIBRARY_RELEASE - Where the release library is
# CRYPTO++_LIBRARY_DEBUG - Where the debug library is
# CRYPTO++_FOUND - Set to TRUE if we found everything (library, includes and executable)

# Copyright (c) 2012 Mads Andreas Elvheim, <mads@mechcore.net>
#
# Redistribution and use is allowed according to the terms of the BSD license.
# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
#
# Generated by CModuler, a CMake Module Generator - http://gitorious.org/cmoduler

IF( CRYPTO++_INCLUDE_DIR AND CRYPTO++_LIBRARY_RELEASE AND CRYPTO++_LIBRARY_DEBUG )
    SET(CRYPTO++_FIND_QUIETLY TRUE)
ENDIF( CRYPTO++_INCLUDE_DIR AND CRYPTO++_LIBRARY_RELEASE AND CRYPTO++_LIBRARY_DEBUG )

FIND_PATH( CRYPTO++_INCLUDE_DIR cryptlib.h PATH_SUFFIXES crypto++ )

FIND_LIBRARY(CRYPTO++_LIBRARY_RELEASE NAMES cryptopp )

FIND_LIBRARY(CRYPTO++_LIBRARY_DEBUG NAMES cryptopp  HINTS /usr/lib/debug/usr/lib/ )

IF( CRYPTO++_LIBRARY_RELEASE OR CRYPTO++_LIBRARY_DEBUG AND CRYPTO++_INCLUDE_DIR )
	SET( CRYPTO++_FOUND TRUE )
ENDIF( CRYPTO++_LIBRARY_RELEASE OR CRYPTO++_LIBRARY_DEBUG AND CRYPTO++_INCLUDE_DIR )

IF( CRYPTO++_LIBRARY_DEBUG AND CRYPTO++_LIBRARY_RELEASE )
	# if the generator supports configuration types then set
	# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value
	IF( CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE )
		SET( CRYPTO++_LIBRARIES optimized ${CRYPTO++_LIBRARY_RELEASE} debug ${CRYPTO++_LIBRARY_DEBUG} )
	ELSE( CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE )
    # if there are no configuration types and CMAKE_BUILD_TYPE has no value
    # then just use the release libraries
		SET( CRYPTO++_LIBRARIES ${CRYPTO++_LIBRARY_RELEASE} )
	ENDIF( CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE )
ELSEIF( CRYPTO++_LIBRARY_RELEASE )
	SET( CRYPTO++_LIBRARIES ${CRYPTO++_LIBRARY_RELEASE} )
ELSE( CRYPTO++_LIBRARY_DEBUG AND CRYPTO++_LIBRARY_RELEASE )
	SET( CRYPTO++_LIBRARIES ${CRYPTO++_LIBRARY_DEBUG} )
ENDIF( CRYPTO++_LIBRARY_DEBUG AND CRYPTO++_LIBRARY_RELEASE )

IF( CRYPTO++_FOUND )
	IF( NOT CRYPTO++_FIND_QUIETLY )
		MESSAGE( STATUS "Found Crypto++ header file in ${CRYPTO++_INCLUDE_DIR}")
		MESSAGE( STATUS "Found Crypto++ libraries: ${CRYPTO++_LIBRARIES}")
	ENDIF( NOT CRYPTO++_FIND_QUIETLY )
ELSE(CRYPTO++_FOUND)
	IF( CRYPTO++_FIND_REQUIRED)
		MESSAGE( FATAL_ERROR "Could not find Crypto++" )
	ELSE( CRYPTO++_FIND_REQUIRED)
		MESSAGE( STATUS "Optional package Crypto++ was not found" )
	ENDIF( CRYPTO++_FIND_REQUIRED)
ENDIF(CRYPTO++_FOUND)
